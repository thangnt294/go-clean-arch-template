// Code generated by mockery v2.33.2. DO NOT EDIT.

package domain

import (
	context "context"
	domain "go-template/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

type AuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthRepository) EXPECT() *AuthRepository_Expecter {
	return &AuthRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *AuthRepository) Create(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuthRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *AuthRepository_Expecter) Create(ctx interface{}, user interface{}) *AuthRepository_Create_Call {
	return &AuthRepository_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *AuthRepository_Create_Call) Run(run func(ctx context.Context, user domain.User)) *AuthRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *AuthRepository_Create_Call) Return(_a0 error) *AuthRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthRepository_Create_Call) RunAndReturn(run func(context.Context, domain.User) error) *AuthRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *AuthRepository) GetByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _m.Called(ctx, email)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type AuthRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *AuthRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *AuthRepository_GetByEmail_Call {
	return &AuthRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *AuthRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *AuthRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthRepository_GetByEmail_Call) Return(_a0 domain.User, _a1 error) *AuthRepository_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthRepository_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *AuthRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
