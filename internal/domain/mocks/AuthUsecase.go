// Code generated by mockery v2.33.2. DO NOT EDIT.

package domain

import (
	context "context"
	domain "go-template/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

type AuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUsecase) EXPECT() *AuthUsecase_Expecter {
	return &AuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, user
func (_m *AuthUsecase) Login(ctx context.Context, user domain.UserLogin) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserLogin) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserLogin) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.UserLogin) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.UserLogin
func (_e *AuthUsecase_Expecter) Login(ctx interface{}, user interface{}) *AuthUsecase_Login_Call {
	return &AuthUsecase_Login_Call{Call: _e.mock.On("Login", ctx, user)}
}

func (_c *AuthUsecase_Login_Call) Run(run func(ctx context.Context, user domain.UserLogin)) *AuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UserLogin))
	})
	return _c
}

func (_c *AuthUsecase_Login_Call) Return(_a0 string, _a1 error) *AuthUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecase_Login_Call) RunAndReturn(run func(context.Context, domain.UserLogin) (string, error)) *AuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: ctx, user
func (_m *AuthUsecase) Signup(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthUsecase_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type AuthUsecase_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *AuthUsecase_Expecter) Signup(ctx interface{}, user interface{}) *AuthUsecase_Signup_Call {
	return &AuthUsecase_Signup_Call{Call: _e.mock.On("Signup", ctx, user)}
}

func (_c *AuthUsecase_Signup_Call) Run(run func(ctx context.Context, user domain.User)) *AuthUsecase_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *AuthUsecase_Signup_Call) Return(_a0 error) *AuthUsecase_Signup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthUsecase_Signup_Call) RunAndReturn(run func(context.Context, domain.User) error) *AuthUsecase_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
